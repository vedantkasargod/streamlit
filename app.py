import streamlit as st
import streamlit_shadcn_ui as ui
import pickle
import os

# Function to load a model from a pickle file
def load_model(model_name):
    model_path = os.path.join('models', model_name)
    with open(model_path, 'rb') as f:
        return pickle.load(f)

# Inferencing Functions
def predict_with_linear_regression(model, inputs):
    return model.predict([inputs])[0]

def predict_with_logistic_regression(model, inputs):
    return model.predict([inputs])[0]

def predict_with_naive_bayes(model, inputs):
    return model.predict([inputs])[0]

def predict_with_decision_tree(model, inputs):
    return model.predict([inputs])[0]

def load_apriori_rules():
    model_path = os.path.join('models', 'apriori_model.pkl')
    with open(model_path, 'rb') as f:
        return pickle.load(f)

# Define function to display the result
def display_prediction(prediction, description):
    st.subheader("Prediction Result")
    st.write(description)
    st.write(f"*Result:* {prediction}")

@st.fragment
def input_fragment():
    st.header("Input Features")
    Pclass = ui.select(options=[1, 2, 3], label="Pclass (Ticket Class)", key="pclass_select")
    Age = ui.slider(default_value=[25], min_value=1, max_value=100, step=1, label="Age", key="age_slider")[0]
    Fare = ui.slider(default_value=[50], min_value=0, max_value=500, step=1, label="Fare", key="fare_slider")[0]
    Sex = ui.select(options=["Male", "Female"], label="Sex", key="sex_select")
    Sex_binary = 1 if Sex == "Female" else 0
    
    inputs = [Pclass, Age, Fare, Sex_binary]
    return inputs

@st.fragment
def prediction_fragment(inputs):
    model_option = st.session_state.get('model_option', "Linear Regression (Predict Fare)")
    
    if model_option == "Linear Regression (Predict Fare)":
        st.subheader("Predict Fare using Linear Regression")
        model = load_model('linear_regression_model.pkl')
        prediction_inputs = inputs[:2] + [inputs[3]]  # Exclude Fare
        prediction = predict_with_linear_regression(model, prediction_inputs)
        display_prediction(f"${prediction:.2f}", "The predicted fare is based on the passenger's class, age, and gender.")
    
    elif model_option == "Logistic Regression (Predict Survival)":
        st.subheader("Predict Survival using Logistic Regression")
        model = load_model('logistic_regression_model.pkl')
        prediction = predict_with_logistic_regression(model, inputs)
        display_prediction("Survived" if prediction == 1 else "Did Not Survive", "The model predicts whether the passenger survived based on class, age, fare, and gender.")
    
    elif model_option == "Naive Bayes (Predict Survival)":
        st.subheader("Predict Survival using Naive Bayes")
        model = load_model('naive_bayes_model.pkl')
        prediction = predict_with_naive_bayes(model, inputs)
        display_prediction("Survived" if prediction == 1 else "Did Not Survive", "The Naive Bayes model provides a probabilistic prediction of survival based on the input features.")
    
    elif model_option == "Decision Tree (Predict Survival)":
        st.subheader("Predict Survival using Decision Tree")
        model = load_model('decision_tree_model.pkl')
        prediction = predict_with_decision_tree(model, inputs)
        display_prediction("Survived" if prediction == 1 else "Did Not Survive", "The decision tree model uses input features to classify whether the passenger survived or not.")
    
    elif model_option == "Apriori (Association Rules)":
        st.subheader("Apriori Association Rules")
        apriori_rules = load_apriori_rules()
        st.write("These are the association rules generated by the Apriori algorithm:")
        st.dataframe(apriori_rules)
        st.write("The Apriori algorithm identifies associations between survival, ticket class, and gender, showing which combinations of features tend to occur together.")

# Main UI layout
st.title("Titanic Prediction Models")

# Sidebar for navigation and model selection
with st.sidebar:
    st.title("Navigation")
    st.markdown("Choose the model and input data.")
    model_option = ui.select(
        options=[
            "Linear Regression (Predict Fare)",
            "Logistic Regression (Predict Survival)",
            "Naive Bayes (Predict Survival)",
            "Decision Tree (Predict Survival)",
            "Apriori (Association Rules)"
        ],
        label="Choose the model you want to use:",
        key="model_select"
    )
    st.session_state['model_option'] = model_option

# Call the fragment functions
inputs = input_fragment()
prediction_fragment(inputs)

# Add a button to trigger rerun
if ui.button("Rerun Prediction", key="rerun_btn"):
    st.rerun()